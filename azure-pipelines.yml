steps:

- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: AdminPassword'
  inputs:
    azureSubscription: azure-connection
    KeyVaultName: pmckeyvault03
    SecretsFilter: 'SpPassword'

- task: PowerShell@1
  displayName: "Run pester"
  inputs:
    failOnStandardError: true
    scriptType: inlineScript
    inlineScript: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

      Write-Verbose -Verbose "Getting pipeline variables"
      $Location = "$(Parameters.Location)"
      $SpName = "$(Parameters.SpName)"
      $TenantId = "$(Parameters.TenantId)"
      $PasswordString = "$(SpPassword)"

      Write-Verbose -Verbose "Installing modules"
      Install-Module -Name Pester -MaximumVersion 4.10.0 -AllowClobber -Force -Scope CurrentUser
      Install-module Az.Accounts -MinimumVersion 1.4.0 -AllowClobber -Force -Scope CurrentUser
      Install-module Az.Storage -MinimumVersion 1.1.0 -AllowClobber -Force -Scope CurrentUser
      Install-module Az.Resources -MinimumVersion 1.2.1 -AllowClobber -Force -Scope CurrentUser

      Write-Verbose -Verbose "Importing modules"
      Import-Module Pester -RequiredVersion 4.10.0 
      Import-Module Az.Accounts
      Import-Module Az.Storage
      Import-Module Az.Resources

      Write-Verbose -Verbose "Authenticating"
      $Password = ConvertTo-SecureString -AsPlainText -Force $PasswordString
      $Credential = New-Object System.Management.Automation.PSCredential ($SpName, $Password)
      Connect-AzAccount -ServicePrincipal -Credential $Credential -TenantId $tenantId

      $SubscriptionId = (Get-AzContext).Subscription.id
      Write-Verbose -Verbose "Subscription-> $SubscriptionId"

      Set-Location "$(Build.Repository.LocalPath)"
      $outputFile = ".\TEST-RESULTS.xml"
      Invoke-Pester -OutputFile $outputFile -OutputFormat NUnitXml @{Path="./Tests";Parameters=@{SubscriptionId=$SubscriptionId;Location=$Location}}

      # Clean up .Azure folder
      Remove-Item C:\windows\ServiceProfiles\NetworkService\.Azure -Recurse -Force 

      # Checking results to fail build if necessary
      [xml]$result = Get-Content .\TEST-RESULTS.xml
      if ($result.'test-results'.'test-suite'.result -ieq "failure")
      {
          throw "Pester has finished with failed tests"
      }

- task: PublishTestResults@1
  displayName: Publish Test Results
  inputs:
    testRunTitle: Test Results for Pester
    buildPlatform: Windows
    testRunner: NUnit
    testResultsFiles: ./TEST-RESULTS.xml
    failTaskOnFailedTests: true
  condition: succeededOrFailed()

- task: PowerShell@1
  displayName: "Remove result file"
  inputs:
    failOnStandardError: true
    scriptType: inlineScript
    inlineScript: |
      $outputFile = ".\TEST-RESULTS.xml"
      Remove-Item $outputFile
